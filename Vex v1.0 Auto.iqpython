{"mode":"Text","textContent":"#region VEXcode Generated Robot Configuration\r\nfrom vex import *\r\nimport urandom\r\n\r\n# Brain should be defined by default\r\nbrain=Brain()\r\n\r\n# Robot configuration code\r\nbrain_inertial = Inertial()\r\ncontroller = Controller()\r\nmotor_left = Motor(Ports.PORT1, False)\r\nmotor_right = Motor(Ports.PORT6, True)\r\nmotor_spin = Motor(Ports.PORT2, True)\r\nmotor_shoot = Motor(Ports.PORT3, False)\r\nmotor_middle = Motor(Ports.PORT5, False)\r\nelevator = Motor(Ports.PORT4, False)\r\ntouch = Touchled(Ports.PORT12)\r\nbumper_7 = Bumper(Ports.PORT7)\r\n#endregion VEXcode Generated Robot Configuration\r\n\r\n# ------------------------------------------\r\n\r\n# Project: VEXcode Project\r\n# Author: Rawi N\r\n# Created: 22/1/2023\r\n# Description: VEXcode.py\r\n\r\n# ------------------------------------------\r\n\r\n\r\n\r\n \r\n\r\n\r\n# ▒█░░▒█ █▀▀█ █▀▀█ ░▀░ █▀▀█ █▀▀▄ █░░ █▀▀ \r\n# ░▒█▒█░ █▄▄█ █▄▄▀ ▀█▀ █▄▄█ █▀▀▄ █░░ █▀▀ \r\n# ░░▀▄▀░ ▀░░▀ ▀░▀▀ ▀▀▀ ▀░░▀ ▀▀▀░ ▀▀▀ ▀▀▀\r\n\r\n# ------------------------------------\r\nx=1\r\ndetect = 0\r\nmotor4speed = 100\r\nliftspeed = 100\r\nelevatordegrees = 170\r\nnon = 0\r\nshoot = 0\r\nplaceholder = 0\r\nchangemode = 0\r\nledtouch = 0\r\n\r\n\r\nfrom vex import *\r\nimport time\r\n\r\n\r\n\r\n# █▀▀ █▀▀ ▀▀█▀▀ █░░█ █▀▀█ \r\n# ▀▀█ █▀▀ ░░█░░ █░░█ █░░█ \r\n# ▀▀▀ ▀▀▀ ░░▀░░ ░▀▀▀ █▀▀▀\r\n\r\n\r\nmotor_spin.set_velocity(motor4speed, PERCENT)\r\nbrain_inertial.set_heading(0, DEGREES)\r\nmotor_middle.set_position(0,DEGREES)\r\nmotor_middle.set_position(0,DEGREES)\r\nbrain_inertial.set_heading(0, DEGREES)\r\nbrain_inertial.set_rotation(0, DEGREES)\r\n\r\nmotor_left.set_stopping(BRAKE)\r\nmotor_right.set_stopping(BRAKE)\r\n\r\n# █▀▀▄ █▀▀█ ░▀░ ▀█░█▀ ░▀░ █▀▀▄ █▀▀▀ 　 █▀▀▄ █▀▀ █▀▀ \r\n# █░░█ █▄▄▀ ▀█▀ ░█▄█░ ▀█▀ █░░█ █░▀█ 　 █░░█ █▀▀ █▀▀ \r\n# ▀▀▀░ ▀░▀▀ ▀▀▀ ░░▀░░ ▀▀▀ ▀░░▀ ▀▀▀▀ 　 ▀▀▀░ ▀▀▀ ▀░░\r\n\r\n\r\n\r\n\r\n#backward new\r\ndef backcount():\r\n    motor_left.set_position(0,DEGREES)\r\n    motor_right.set_position(0,DEGREES)\r\n    while (controller.axisA.position()<-10):\r\n        A = controller.axisA.position()\r\n        left = motor_left.position(DEGREES)\r\n        right = motor_right.position(DEGREES)\r\n        mo = left-right\r\n        if mo>2:\r\n            motor_left.set_velocity(A,PERCENT) \r\n            motor_right.set_velocity(A-5,PERCENT)      #left over\r\n\r\n\r\n        elif mo<2:\r\n            motor_left.set_velocity(A-5,PERCENT) \r\n            motor_right.set_velocity(A,PERCENT)            #right over\r\n\r\n\r\n        else:\r\n            print(\"backcount\")\r\n            motor_left.set_velocity(A,PERCENT)\r\n            motor_right.set_velocity(A,PERCENT)\r\n\r\n        motor_left.spin(FORWARD)\r\n        motor_right.spin(FORWARD)\r\n\r\n\r\n#forward new\r\ndef drivefrontcount(degree):\r\n    left = motor_left.position(DEGREES)\r\n    right = motor_right.position(DEGREES)\r\n    \r\n    A = 80\r\n    motor_left.set_position(0,DEGREES)\r\n    motor_right.set_position(0,DEGREES)\r\n    left = motor_left.position(DEGREES)\r\n    right = motor_right.position(DEGREES)\r\n    mo = left-right\r\n    if mo>2:\r\n        motor_left.set_velocity(A-5,PERCENT) \r\n        motor_right.set_velocity(A,PERCENT)      #left over\r\n\r\n\r\n    elif mo<2:\r\n        motor_left.set_velocity(A,PERCENT) \r\n        motor_right.set_velocity(A-5,PERCENT)            #right over\r\n\r\n\r\n    else:\r\n        print(\"forwardnew\")\r\n        motor_left.set_velocity(A,PERCENT)\r\n        motor_right.set_velocity(A,PERCENT)\r\n\r\n    motor_left.spin(FORWARD)\r\n    motor_right.spin(FORWARD)\r\n        \r\n\r\ndef TurnSideBlue(ang):\r\n    stdb = brain_inertial.rotation()\r\n    db = brain_inertial.rotation()-stdb\r\n    #print(db)\r\n    motor_right.set_stopping(COAST)\r\n    while db <= ang:\r\n        db = brain_inertial.rotation()-stdb\r\n        #print(db)\r\n        if(ang-db > 20):\r\n            motor_left.set_velocity(ang-db,PERCENT)\r\n            motor_left.spin(FORWARD)\r\n        else:\r\n            motor_left.set_velocity(20,PERCENT)\r\n            motor_left.spin(FORWARD)\r\n\r\n    motor_left.stop()\r\n    motor_right.set_stopping(BRAKE)\r\n\r\n\r\n# gyro forward\r\n\r\n\r\nmotor_left.set_velocity(100,PERCENT)\r\nmotor_right.set_velocity(100,PERCENT)\r\ndef DriveForward(amt):\r\n    stdb = brain_inertial.rotation()\r\n    motor_left.set_position(0, DEGREES)\r\n    while motor_left.position(DEGREES) <= amt:\r\n       \r\n        db = brain_inertial.rotation()-stdb\r\n        #print(db)\r\n        # time.sleep(0.10)\r\n\r\n        \r\n        if db <= -4:\r\n            motor_left.set_velocity(100,PERCENT)\r\n            motor_right.set_velocity(95,PERCENT)\r\n            motor_left.spin(FORWARD)\r\n            motor_right.spin(FORWARD)\r\n            ### left ####\r\n        elif db >= 4:\r\n            motor_left.set_velocity(95,PERCENT)\r\n            motor_right.set_velocity(100,PERCENT)\r\n            motor_left.spin(FORWARD)\r\n            motor_right.spin(FORWARD)\r\n            ### right ####\r\n        \r\n        else:\r\n            motor_left.set_velocity(100,PERCENT)\r\n            motor_right.set_velocity(100,PERCENT)\r\n            motor_left.spin(FORWARD)\r\n            motor_right.spin(FORWARD)\r\n        \r\n\r\n\r\n    motor_left.stop()\r\n    motor_right.stop()\r\n\r\n\r\n\r\n#backward gyro\r\ndef DriveBackward(amt):\r\n    GR_forDrive = brain_inertial.rotation()\r\n    motor_left.set_position(0, DEGREES)\r\n    while motor_left.position(DEGREES) >= amt*-1:\r\n        rotat = brain_inertial.rotation()\r\n        print(motor_left.position(DEGREES))\r\n\r\n        print(GR_forDrive-rotat)\r\n        \r\n        A = -80\r\n        if(rotat-GR_forDrive>3): #RIGHT\r\n            motor_left.set_velocity(A,PERCENT)\r\n            motor_right.set_velocity(A+10,PERCENT)\r\n        elif(rotat-GR_forDrive<-3): #LEFT\r\n            motor_left.set_velocity(A+10,PERCENT)\r\n            motor_right.set_velocity(A,PERCENT)\r\n        else:\r\n            motor_left.set_velocity(A,PERCENT)\r\n            motor_right.set_velocity(A,PERCENT)\r\n\r\n        motor_left.spin(FORWARD)\r\n        motor_right.spin(FORWARD)\r\n    motor_left.stop()\r\n    motor_right.stop()\r\n\r\n\r\ndef rotateright(ang):\r\n    stdb = brain_inertial.rotation()\r\n    db = brain_inertial.rotation()-stdb\r\n    #print(db)\r\n    while db <= ang:\r\n        db = brain_inertial.rotation()-stdb\r\n        #print(db)\r\n        if(ang-db > 45):\r\n            motor_left.set_velocity(80,PERCENT)\r\n            motor_right.set_velocity(-80,PERCENT)\r\n            motor_left.spin(FORWARD)\r\n            motor_right.spin(FORWARD) \r\n        else:\r\n            motor_left.set_velocity(5,PERCENT)\r\n            motor_right.set_velocity(-5,PERCENT)\r\n            motor_left.spin(FORWARD)\r\n            motor_right.spin(FORWARD) \r\n    \r\n   \r\n\r\n    motor_left.stop()\r\n    motor_right.stop()\r\n       \r\ndef rotateleft(ang):\r\n    stdb = brain_inertial.rotation()\r\n    db = brain_inertial.rotation()-stdb\r\n    #print(db)\r\n    while db >= ang:\r\n        db = brain_inertial.rotation()-stdb\r\n        #print(db)\r\n        if (db-ang > 45):\r\n            motor_right.set_velocity(80,PERCENT)\r\n            motor_left.set_velocity(-80,PERCENT)\r\n            motor_left.spin(FORWARD)\r\n            motor_right.spin(FORWARD)\r\n        else:\r\n            motor_right.set_velocity(5,PERCENT)\r\n            motor_left.set_velocity(-5,PERCENT)\r\n            motor_left.spin(FORWARD)\r\n            motor_right.spin(FORWARD)\r\n\r\n    motor_left.stop()\r\n    motor_right.stop()\r\n    motor_left.stop()\r\n    motor_right.stop()\r\n\r\n\r\ndef drivesecond(direction,speed,sec):\r\n    motor_left.set_velocity(speed,PERCENT)\r\n    motor_right.set_velocity(speed,PERCENT)\r\n\r\n    if \"f\" in direction:\r\n        motor_left.spin(FORWARD)\r\n        motor_right.spin(FORWARD)\r\n        time.sleep(sec)\r\n    elif \"r\" in direction:\r\n        motor_left.spin(REVERSE)\r\n        motor_right.spin(REVERSE)\r\n        time.sleep(sec)\r\n    else:\r\n        print(\"drivesecond() error value\",direction)\r\n    \r\n    motor_left.stop()\r\n    motor_right.stop()\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n \r\n\r\n\r\n# █▀▄▀█ █▀▀█ ░▀░ █▀▀▄ 　 █▀▀ █▀▀█ █▀▀▄ █▀▀ \r\n# █░▀░█ █▄▄█ ▀█▀ █░░█ 　 █░░ █░░█ █░░█ █▀▀ \r\n# ▀░░░▀ ▀░░▀ ▀▀▀ ▀░░▀ 　 ▀▀▀ ▀▀▀▀ ▀▀▀░ ▀▀▀\r\n\r\ndef main():\r\n\r\n    motor_left.set_stopping(BRAKE)\r\n    motor_right.set_stopping(BRAKE)\r\n    touch.set_color(Color.GREEN)\r\n    printtoscreen(\"--Running--\")\r\n\r\n    #------Start of Autonomous------\r\n    \r\n    # Start -> Yellow\r\n    motor_middle.set_velocity(100, PERCENT)\r\n    motor_middle.spin_to_position(178,DEGREES,wait=True)\r\n    DriveForward(650)\r\n\r\n    # Do Yellow\r\n    drivesecond(\"f\",100,0.5)\r\n    time.sleep(0.1)\r\n    motor_middle.set_timeout(1,SECONDS)\r\n    motor_middle.spin_to_position(107,DEGREES,wait=True)\r\n    drivesecond(\"r\",100,0.2)\r\n    motor_middle.spin_to_position(188,DEGREES,wait=True)\r\n    time.sleep(0.1)\r\n    drivesecond(\"f\",70,0.7)\r\n    DriveBackward(250)\r\n    spinpurple(\"r\")\r\n    motor_middle.set_velocity(70,PERCENT)\r\n    motor_middle.spin_to_position(-30,DEGREES,wait=True)\r\n    time.sleep(0.1)\r\n    motor_middle.spin_to_position(0,DEGREES,wait=False)\r\n\r\n    # Yellow -> Purple 1\r\n    rotateleft(-127)\r\n    time.sleep(0.2)\r\n    spinpurple(\"n\")\r\n    DriveBackward(586)\r\n    time.sleep(0.2)\r\n    spinpurple(\"r\")\r\n    rotateright(51)\r\n    time.sleep(0.2)\r\n    spinpurple(\"n\")\r\n    bp = True\r\n    while bp==True:\r\n        if bumper_7.pressing():\r\n            bp = False\r\n        motor_left.set_velocity(-50,PERCENT)\r\n        motor_right.set_velocity(-50,PERCENT)\r\n        motor_left.spin(FORWARD)\r\n        motor_right.spin(FORWARD)\r\n    \r\n\r\n    motor_left.stop()\r\n    motor_right.stop()\r\n\r\n    time.sleep(0.2)\r\n\r\n    # Do Purple 1\r\n    time.sleep(0.2)\r\n    DriveForward(27)\r\n\r\n    time.sleep(6)\r\n\r\n    # Purple 1 -> Blue 1\r\n    DriveForward(20)\r\n    spinpurple(\"r\")\r\n    time.sleep(0.2)\r\n    TurnSideBlue(50)\r\n    time.sleep(0.2)\r\n    DriveForward(67)\r\n    time.sleep(0.2)\r\n    rotateleft(-134)\r\n    time.sleep(0.2)\r\n    DriveForward(62)\r\n\r\n    # Do Blue 1\r\n    drivesecond(\"f\",100,0.6)\r\n    lift(\"u\")\r\n    time.sleep(0.2)\r\n    lift(\"d\")\r\n    time.sleep(0.2)\r\n\r\n    # Blue 1 -> Shoot#1\r\n    DriveBackward(575)\r\n    time.sleep(0.2)\r\n    rotateleft(-84)\r\n    time.sleep(0.2)\r\n    DriveBackward(575)\r\n    time.sleep(0.2)\r\n    rotateright(90)\r\n    time.sleep(0.2)\r\n    drivesecond(\"r\",50,1.3)\r\n    time.sleep(0.2)\r\n    DriveForward(165)\r\n    time.sleep(0.1)\r\n\r\n    # Shooting#1\r\n    toggleshoot(True)\r\n\r\n    spinpurple(\"r\")\r\n    time.sleep(2)\r\n    spinpurple(\"n\")\r\n    time.sleep(2)\r\n    spinpurple(\"r\")\r\n    time.sleep(2)\r\n    toggleshoot(False)\r\n    spinpurple(\"n\")\r\n    time.sleep(0.2)\r\n\r\n    # Shoot#1 -> Blue 2\r\n    DriveBackward(20)\r\n    time.sleep(0.2)\r\n    rotateright(85)\r\n    time.sleep(0.2)\r\n    drivesecond(\"f\",100,2.2)\r\n\r\n    time.sleep(0.4)\r\n    DriveBackward(325)\r\n    time.sleep(0.2)\r\n    rotateleft(-85)\r\n    time.sleep(0.2)\r\n    DriveForward(350)\r\n\r\n    # Do Blue 2\r\n    drivesecond(\"f\",100,0.95)\r\n    lift(\"u\")\r\n    time.sleep(0.4)\r\n    lift(\"d\")\r\n    time.sleep(0.2)\r\n\r\n    # Blue 2 -> Purple 2\r\n    DriveBackward(240)\r\n    time.sleep(0.2)\r\n    rotateleft(-90)\r\n    time.sleep(0.2)\r\n    DriveBackward(280)\r\n    time.sleep(0.1)\r\n    \r\n    # Do Purple 2\r\n    drivesecond(\"r\",20,0.5)\r\n    time.sleep(0.2)\r\n    DriveForward(32)\r\n    time.sleep(7)\r\n\r\n    # Purple 2 -> Shoot#2\r\n    DriveForward(510)\r\n    time.sleep(0.2)\r\n    rotateright(89)\r\n    time.sleep(0.1)\r\n\r\n    # Shooting#2\r\n    toggleshoot(True)\r\n    time.sleep(1)\r\n    spinpurple(\"r\")\r\n    time.sleep(6)\r\n    toggleshoot(False)\r\n    spinpurple(\"n\")\r\n    time.sleep(1)\r\n\r\n    # Shoot#2 -> Touch Down\r\n    \r\n\r\n\r\n    # Touching Down\r\n    \r\n\r\n\r\n    #------End of Autonomous------\r\n\r\n    printtoscreen(\"---End---\")\r\n    touch.set_color(Color.RED)\r\n\r\n    stopspin()\r\n\r\n      \r\n    \r\n   \r\n        \r\n   \r\n\r\n# ░█████╗░██████╗░██████╗░░░░░░░░█████╗░███╗░░██╗  ███╗░░░███╗░█████╗░████████╗░█████╗░██████╗░\r\n# ██╔══██╗██╔══██╗██╔══██╗░░░░░░██╔══██╗████╗░██║  ████╗░████║██╔══██╗╚══██╔══╝██╔══██╗██╔══██╗\r\n# ███████║██║░░██║██║░░██║█████╗██║░░██║██╔██╗██║  ██╔████╔██║██║░░██║░░░██║░░░██║░░██║██████╔╝\r\n# ██╔══██║██║░░██║██║░░██║╚════╝██║░░██║██║╚████║  ██║╚██╔╝██║██║░░██║░░░██║░░░██║░░██║██╔══██╗\r\n# ██║░░██║██████╔╝██████╔╝░░░░░░╚█████╔╝██║░╚███║  ██║░╚═╝░██║╚█████╔╝░░░██║░░░╚█████╔╝██║░░██║\r\n# ╚═╝░░╚═╝╚═════╝░╚═════╝░░░░░░░░╚════╝░╚═╝░░╚══╝  ╚═╝░░░░░╚═╝░╚════╝░░░░╚═╝░░░░╚════╝░╚═╝░░╚═╝\r\n\r\n\r\n\r\n# █▀█ █░█ █▀█ █▀█ █░░ █▀▀\r\n# █▀▀ █▄█ █▀▄ █▀▀ █▄▄ ██▄\r\n\r\ndef spinpurple(mode):\r\n    if mode == \"n\":\r\n        motor_spin.set_velocity(100,PERCENT)\r\n        motor_spin.spin(REVERSE)\r\n    elif mode == \"r\":\r\n        motor_spin.set_velocity(100,PERCENT)\r\n        motor_spin.spin(FORWARD)\r\n    else:\r\n        print(\"What? spinpurple([MODE?])\")\r\n\r\n\r\ndef stopspin():\r\n    motor_spin.stop()\r\n\r\n        \r\n            \r\n\r\n# █▀ █░█ █▀█ █▀█ ▀█▀ █▀▀ █▀█\r\n# ▄█ █▀█ █▄█ █▄█ ░█░ ██▄ █▀▄\r\n\r\ndef toggleshoot(Boolean):\r\n    if Boolean == False:\r\n            motor_shoot.set_velocity(5,PERCENT)\r\n            motor_shoot.spin(REVERSE)\r\n            print(shoot)\r\n                \r\n    elif Boolean == True:\r\n        motor_shoot.set_velocity(100,PERCENT)\r\n        motor_shoot.spin(FORWARD)\r\n        print(shoot)\r\n\r\n    else:\r\n        print(\"what bro? (shoot(???))\")\r\n            \r\n       \r\n\r\n\r\n# █▄▄ █░░ █░█ █▀▀ ▄▄ █░░ █ █▀▀ ▀█▀\r\n# █▄█ █▄▄ █▄█ ██▄ ░░ █▄▄ █ █▀░ ░█░\r\n\r\n#td = touchdown u = up d = down\r\ndef lift(mode):\r\n    data = elevator.position(DEGREES)\r\n    print(data)\r\n    elevator.set_velocity(100,PERCENT)\r\n    #touch down\r\n    if mode == \"td\":\r\n       elevator.spin_to_position(200,DEGREES,wait=True)\r\n\r\n    elif mode == \"u\":\r\n        elevator.set_stopping(HOLD)\r\n        elevator.set_timeout(1.5,SECONDS)\r\n        elevator.spin_to_position(120,DEGREES,wait=True)\r\n\r\n\r\n    elif mode == \"d\" :\r\n        elevator.set_stopping(HOLD)\r\n        elevator.spin_to_position(0,DEGREES,wait=True)\r\n        elevator.stop()\r\n\r\n    else:\r\n        #stop # ไม่ต้องสนใจ\r\n        elevator.set_stopping(HOLD)\r\n        elevator.stop();\r\n\r\n\r\n\r\n# █▄█ █▀▀ █░░ █░░ █▀█ █░█░█ ▄▄ █░░ █ █▀▀ ▀█▀\r\n# ░█░ ██▄ █▄▄ █▄▄ █▄█ ▀▄▀▄▀ ░░ █▄▄ █ █▀░ ░█░\r\n\r\ndef yellow():\r\n\r\n    midsta = motor_middle.position(DEGREES)\r\n    print(midsta)\r\n    if controller.buttonLUp.pressing():\r\n        motor_middle.set_velocity(100, PERCENT)\r\n        motor_middle.spin_to_position(176,DEGREES,wait=True)\r\n        \r\n\r\n    elif controller.buttonFDown.pressing():\r\n\r\n        \r\n    \r\n        #yellow collect up ปุ่มกดเพื่องัด สีเหลือง\r\n        motor_middle.set_velocity(80, PERCENT)\r\n        motor_middle.spin(FORWARD)\r\n\r\n    elif controller.buttonFUp.pressing():\r\n\r\n\r\n        #yellow collect don ปุ่มกดเพื่อไม่งัดสีเหลือง\r\n        motor_middle.set_velocity(80, PERCENT)\r\n        motor_middle.spin(REVERSE)\r\n\r\n    else:\r\n        \r\n        motor_middle.set_stopping(HOLD)\r\n        motor_middle.stop();\r\n\r\n\r\n# Fun stuff\r\n\r\ndef printtoscreen(text):\r\n    brain.screen.set_font(FontType.MONO30)\r\n    brain.screen.clear_row(2)\r\n    brain.screen.set_cursor(2,1)\r\n    brain.screen.print(text)\r\n\r\n#Start Program\r\n\r\ntouch.pressed(main)\r\n# main()","textLanguage":"python","rconfig":[{"port":[],"name":"controller","customName":false,"deviceType":"Controller","deviceClass":"controller","setting":{"left":"","leftDir":"false","right":"","rightDir":"false","e":"","eDir":"false","f":"","fDir":"false","l3r3":"","l3r3Dir":"false","drive":"none"},"triportSourcePort":22},{"port":[1],"name":"motor_left","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse"},"triportSourcePort":22},{"port":[6],"name":"motor_right","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"true","fwd":"forward","rev":"reverse"},"triportSourcePort":22},{"port":[2],"name":"motor_spin","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"true","fwd":"forward","rev":"reverse"},"triportSourcePort":22},{"port":[3],"name":"motor_shoot","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse"},"triportSourcePort":22},{"port":[5],"name":"motor_middle","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse"},"triportSourcePort":22},{"port":[4],"name":"elevator","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse"},"triportSourcePort":22},{"port":[12],"name":"touch","customName":true,"deviceType":"TouchLED","deviceClass":"touchled","setting":{},"triportSourcePort":22},{"port":[7],"name":"bumper_7","customName":false,"deviceType":"Bumper","deviceClass":"bumper","setting":{},"triportSourcePort":22}],"slot":3,"platform":"IQ","sdkVersion":"20220726.10.00.00","appVersion":"2.4.5","minVersion":"2.4.0","fileFormat":"1.2.0","icon":"","targetBrainGen":"Second","target":"Physical"}