{"mode":"Text","textContent":"#region VEXcode Generated Robot Configuration\nfrom vex import *\nimport urandom\n\n# Brain should be defined by default\nbrain=Brain()\n\n# Robot configuration code\nbrain_inertial = Inertial()\ncontroller = Controller()\nmotor_4 = Motor(Ports.PORT12, False)\nelevator = Motor(Ports.PORT5, False)\nmotor_left = Motor(Ports.PORT1, False)\nmotor_right = Motor(Ports.PORT6, True)\n#endregion VEXcode Generated Robot Configuration\n\n# ------------------------------------------\n# \n# \tProject:      VEXcode Project\n# \tAuthor:       Rawi N\n# \tCreated:      22/1/2023\n# \tDescription:  VEXcode.py\n# \n# ------------------------------------------\n\n\n#-------------------------------------------\n\n# config speedmode\n\nmotor4speed = 100\nmotorcarspeed = 100\nmotorcarturnspeed = 50\nliftspeed = 100\n\n\n#---------------------------------------------\n\n\n\n# config slowmode\n\n\nmotorcarspeedslow = 40\nmotorcarturnspeedslow = 20\n\n\n#---------------------------------------------\n\n\n\n\n\n# Library imports\nfrom vex import *\n\n\n\n\n\ndef main():\n       # drivetrain.set_drive_velocity(motorcarspeed, PERCENT)\n    # drivetrain.set_turn_velocity(motorcarturnspeed, PERCENT)\n\n    # motor_4.set_velocity(motor4speed, PERCENT)\n    # elevator.set_velocity(liftspeed, PERCENT)\n\n    while True :\n        # drivetrain.set_drive_velocity(motorcarspeed, PERCENT)\n        # drivetrain.set_turn_velocity(motorcarturnspeed, PERCENT)\n        # motor_4.set_velocity(motor4speed, PERCENT)\n        # elevator.set_velocity(liftspeed, PERCENT)\n        a =controller.axisA.position()\n        c = controller.axisC.position()\n        # wait(10,MSEC)\n        if controller.axisA.position() >= 10:\n            #forward\n            motor_left.set_velocity(a,PERCENT)\n            motor_right.set_velocity(a,PERCENT)\n\n        elif controller.axisA.position() <= -10:\n            #backward\n            \n           motor_left.set_velocity(a,PERCENT)\n           motor_right.set_velocity(a,PERCENT)\n        \n\n        elif controller.axisC.position() >= 10:\n            #right\n            \n            motor_left.set_velocity(c-(25),PERCENT)\n            motor_right.set_velocity(c*(-1)-(25),PERCENT)\n\n            \n        elif controller.axisC.position() <= -10:\n            #left\n            motor_left.set_velocity(c-(25),PERCENT)\n            motor_right.set_velocity(c*(-1)-(25),PERCENT)\n\n        elif controller.buttonLUp.pressing():\n          \n            motor_4.set_velocity(motor4speed, PERCENT)\n            elevator.set_velocity(liftspeed, PERCENT)\n\n        elif controller.buttonLDown.pressing():\n        \n            motor_4.set_velocity(motor4speed, PERCENT)\n            elevator.set_velocity(liftspeed, PERCENT)\n\n        \n\n        elif controller.buttonEUp.pressing():\n            #spin button\n           \n            motor_4.spin(FORWARD)\n        \n        elif controller.buttonFUp.pressing():\n            #elevator up\n            # elevator.spin(FORWARD)\n           \n            elevator.spin_for(FORWARD,470, DEGREES)\n\n\n        elif controller.buttonFDown.pressing():\n            #elevator down\n            # elevator.spin(REVERSE)\n           \n            elevator.spin_for(REVERSE,472, DEGREES)\n\n       \n        else:\n            #stop\n            elevator.stop();\n            motor_4.stop();\n            motor_left.set_velocity(0,PERCENT)\n            motor_right.set_velocity(0,PERCENT)\n        motor_left.spin(FORWARD)\n        motor_right.spin(FORWARD)\n    \n\n\n\n\nmotor_left.stop()\nmotor_right.stop()\n\n    \n\n\nmain()\n\n\n\ndef reverse():\n       # drivetrain.set_drive_velocity(motorcarspeed, PERCENT)\n    # drivetrain.set_turn_velocity(motorcarturnspeed, PERCENT)\n\n    # motor_4.set_velocity(motor4speed, PERCENT)\n    # elevator.set_velocity(liftspeed, PERCENT)\n\n    while True :\n        # drivetrain.set_drive_velocity(motorcarspeed, PERCENT)\n        # drivetrain.set_turn_velocity(motorcarturnspeed, PERCENT)\n        # motor_4.set_velocity(motor4speed, PERCENT)\n        # elevator.set_velocity(liftspeed, PERCENT)\n        a =controller.axisA.position()\n        c = controller.axisC.position()\n        # wait(10,MSEC)\n        if controller.axisA.position() >= 10:\n            #forward\n            motor_left.set_velocity(a*(-1),PERCENT)\n            motor_right.set_velocity(a*(-1),PERCENT)\n\n        elif  controller.buttonFDown.pressing():\n\n            reverse()\n\n\n        elif  controller.buttonFUp.pressing():\n            \n        #normal\n\n            normal()\n\n        elif controller.axisA.position() <= -10:\n            #backward\n            \n           motor_left.set_velocity(a*(-1),PERCENT)\n           motor_right.set_velocity(a*(-1),PERCENT)\n        \n\n        elif controller.axisC.position() >= 10:\n            #right\n            \n            motor_left.set_velocity(c-(25)*(-1),PERCENT)\n            motor_right.set_velocity(c-(25),PERCENT)\n\n            \n        elif controller.axisC.position() <= -10:\n            #left\n            motor_left.set_velocity(c-(25)*(-1),PERCENT)\n            motor_right.set_velocity(c-(25),PERCENT)\n\n        elif controller.buttonLUp.pressing():\n          \n            motor_4.set_velocity(motor4speed, PERCENT)\n            elevator.set_velocity(liftspeed, PERCENT)\n\n        elif controller.buttonLDown.pressing():\n        \n            motor_4.set_velocity(motor4speed, PERCENT)\n            elevator.set_velocity(liftspeed, PERCENT)\n\n        \n\n        elif controller.buttonEUp.pressing():\n            #spin button\n           \n            motor_4.spin(FORWARD)\n        \n        elif controller.buttonFUp.pressing():\n            #elevator up\n            # elevator.spin(FORWARD)\n           \n            elevator.spin_for(FORWARD,470, DEGREES)\n\n\n        elif controller.buttonFDown.pressing():\n            #elevator down\n            # elevator.spin(REVERSE)\n           \n            elevator.spin_for(REVERSE,472, DEGREES)\n\n       \n        else:\n            #stop\n            elevator.stop();\n            motor_4.stop();\n            motor_left.set_velocity(0,PERCENT)\n            motor_right.set_velocity(0,PERCENT)\n        motor_left.spin(FORWARD)\n        motor_right.spin(FORWARD)\n    \n\n\n\n\nmotor_left.stop()\nmotor_right.stop()\n\n\n\n\n\ndef normal():\n       # drivetrain.set_drive_velocity(motorcarspeed, PERCENT)\n    # drivetrain.set_turn_velocity(motorcarturnspeed, PERCENT)\n\n    # motor_4.set_velocity(motor4speed, PERCENT)\n    # elevator.set_velocity(liftspeed, PERCENT)\n\n    while True :\n        # drivetrain.set_drive_velocity(motorcarspeed, PERCENT)\n        # drivetrain.set_turn_velocity(motorcarturnspeed, PERCENT)\n        # motor_4.set_velocity(motor4speed, PERCENT)\n        # elevator.set_velocity(liftspeed, PERCENT)\n        a =controller.axisA.position()\n        c = controller.axisC.position()\n        # wait(10,MSEC)\n        if controller.axisA.position() >= 10:\n            #forward\n            motor_left.set_velocity(a,PERCENT)\n            motor_right.set_velocity(a,PERCENT)\n\n        elif controller.axisA.position() <= -10:\n            #backward\n            \n           motor_left.set_velocity(a,PERCENT)\n           motor_right.set_velocity(a,PERCENT)\n        \n\n        elif controller.axisC.position() >= 10:\n            #right\n            \n            motor_left.set_velocity(c-(25),PERCENT)\n            motor_right.set_velocity(c*(-1)-(25),PERCENT)\n\n            \n        elif controller.axisC.position() <= -10:\n            #left\n            motor_left.set_velocity(c-(25),PERCENT)\n            motor_right.set_velocity(c*(-1)-(25),PERCENT)\n\n        elif  controller.buttonFDown.pressing():\n\n            reverse()\n\n\n        elif  controller.buttonFUp.pressing():\n            \n        #normal\n\n            normal()\n        elif controller.buttonLUp.pressing():\n          \n            motor_4.set_velocity(motor4speed, PERCENT)\n            elevator.set_velocity(liftspeed, PERCENT)\n\n        elif controller.buttonLDown.pressing():\n        \n            motor_4.set_velocity(motor4speed, PERCENT)\n            elevator.set_velocity(liftspeed, PERCENT)\n\n        \n\n        elif controller.buttonEUp.pressing():\n            #spin button\n           \n            motor_4.spin(FORWARD)\n        \n        elif controller.buttonFUp.pressing():\n            #elevator up\n            # elevator.spin(FORWARD)\n           \n            elevator.spin_for(FORWARD,470, DEGREES)\n\n\n        elif controller.buttonFDown.pressing():\n            #elevator down\n            # elevator.spin(REVERSE)\n           \n            elevator.spin_for(REVERSE,472, DEGREES)\n\n       \n        else:\n            #stop\n            elevator.stop();\n            motor_4.stop();\n            motor_left.set_velocity(0,PERCENT)\n            motor_right.set_velocity(0,PERCENT)\n        motor_left.spin(FORWARD)\n        motor_right.spin(FORWARD)\n    \n\n\n\n\nmotor_left.stop()\nmotor_right.stop()\n\n","textLanguage":"python","rconfig":[{"port":[],"name":"controller","customName":false,"deviceType":"Controller","deviceClass":"controller","setting":{"left":"","leftDir":"false","right":"","rightDir":"false","e":"","eDir":"false","f":"","fDir":"false","l3r3":"","l3r3Dir":"false","drive":"none"},"triportSourcePort":22},{"port":[12],"name":"motor_4","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse"},"triportSourcePort":22},{"port":[5],"name":"elevator","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse"},"triportSourcePort":22},{"port":[1],"name":"motor_left","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse"},"triportSourcePort":22},{"port":[6],"name":"motor_right","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"true","fwd":"forward","rev":"reverse"},"triportSourcePort":22}],"slot":0,"platform":"IQ","sdkVersion":"20220726.10.00.00","appVersion":"2.4.4","minVersion":"2.4.0","fileFormat":"1.2.0","icon":"","targetBrainGen":"Second","target":"Physical"}