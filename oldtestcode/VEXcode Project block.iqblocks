{"mode":"Blocks","workspace":"<xml xmlns=\"http://www.w3.org/1999/xhtml\"><variables><variable type=\"\" id=\"_2.^beQjx|FGt38A,8(E\" islocal=\"false\" iscloud=\"false\" arraylength=\"0\" arraywidth=\"0\">myVariable</variable></variables><block type=\"iq_events_when_started\" id=\".NsXwU_L.OuU1l7Sho$F\" x=\"70\" y=\"-10\"><next><block type=\"iq_control_forever\" id=\"6`G}$WpSe}w:4|CktId}\"><statement name=\"SUBSTACK\"><block type=\"iq_control_if_elseif_else\" id=\"b%z14/y,iXj$H#=gX4Kg\"><mutation branches=\"4\"></mutation><field name=\"BRANCH_BLANK\">node_modules/@rm-vca/blockly/media/../../../../static/img/ui_imgs/elseif_blank.png</field><field name=\"BRANCH_REMOVE\">node_modules/@rm-vca/blockly/media/../../../../static/img/ui_imgs/elseif_remove.png</field><field name=\"BRANCH_ADD\">node_modules/@rm-vca/blockly/media/../../../../static/img/ui_imgs/elseif_add.png</field><value name=\"CONDITION1\"><block type=\"iq_operator_greater_than\" id=\"j8gXb4P5a*G1=8Dq3]KF\"><value name=\"OPERAND1\"><shadow type=\"math_number\" id=\"zz^;D*{n#S7SV#Yu`Me5\"><field name=\"NUM\"></field></shadow><block type=\"iq_sensing_position_of_controller\" id=\"FC^^R|YqT_Cui.mQgF:c\"><field name=\"AXIS\">AxisA</field></block></value><value name=\"OPERAND2\"><shadow type=\"math_number\" id=\"wz}AGRM%~?z,at5@IG/B\"><field name=\"NUM\">50</field></shadow></value></block></value><statement name=\"SUBSTACK1\"><block type=\"iq_drivetrain_drive\" id=\"HC1=}Sg@{58PvbrOp08/\"><field name=\"DIRECTION\">fwd</field></block></statement><value name=\"CONDITION2\"><block type=\"iq_operator_greater_than\" id=\"+m9Z(HZI{B~Wq6$0s87e\"><value name=\"OPERAND1\"><shadow type=\"math_number\" id=\"FvnRao1eI~jbH*}jg2(w\"><field name=\"NUM\"></field></shadow><block type=\"iq_sensing_position_of_controller\" id=\"8~P!-:I$EEx^+^Zb7dE*\"><field name=\"AXIS\">AxisA</field></block></value><value name=\"OPERAND2\"><shadow type=\"math_number\" id=\"gV5T{_Yqp}0dl;XI;`|g\"><field name=\"NUM\">-50</field></shadow></value></block></value><statement name=\"SUBSTACK2\"><block type=\"iq_drivetrain_drive\" id=\"OBkx]e{7qod^0ddasu3+\"><field name=\"DIRECTION\">rev</field></block></statement><value name=\"CONDITION3\"><block type=\"iq_operator_greater_than\" id=\"DhWY6`2gviis,m:OFHbz\"><value name=\"OPERAND1\"><shadow type=\"math_number\" id=\"FvnRao1eI~jbH*}jg2(w\"><field name=\"NUM\"></field></shadow><block type=\"iq_sensing_position_of_controller\" id=\"ab)O{!vQ*m]Cc;321|I6\"><field name=\"AXIS\">AxisB</field></block></value><value name=\"OPERAND2\"><shadow type=\"math_number\" id=\"!]S_5qPd%X(FY1y)VdCS\"><field name=\"NUM\">50</field></shadow></value></block></value><value name=\"CONDITION4\"><block type=\"iq_sensing_pressing_controller\" id=\"f7U)ZEL0k3#B,^S$v!y2\"><field name=\"BUTTON\">ButtonEUp</field></block></value></block></statement></block></next></block></xml>","rconfig":[{"port":[1,6,4],"name":"Drivetrain","customName":false,"deviceType":"Drivetrain","deviceClass":"smartdrive","setting":{"type":"2-motor","wheelSize":"200mm","gearRatio":"1:1","direction":"fwd","gyroType":"smart","width":"173","unit":"mm","wheelbase":"76","wheelbaseUnit":"mm","xOffset":"0","yOffset":"0","thetaOffset":"0"},"triportSourcePort":22},{"port":[],"name":"Controller","customName":false,"deviceType":"Controller","deviceClass":"controller","setting":{"left":"","leftDir":"false","right":"","rightDir":"false","e":"","eDir":"false","f":"","fDir":"false","l3r3":"","l3r3Dir":"false","drive":"none"},"triportSourcePort":22}],"slot":0,"platform":"IQ","sdkVersion":"20220726.10.00.00","appVersion":"2.4.4","minVersion":"2.4.0","fileFormat":"1.2.0","icon":"","targetBrainGen":"Second","cppStatus":"true","cpp":"// Make sure all required headers are included.\n#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\n#include <math.h>\n#include <string.h>\n\n\n#include \"vex.h\"\n\nusing namespace vex;\n\n// Brain should be defined by default\nbrain Brain;\n\n\n// START IQ MACROS\n#define waitUntil(condition)                                                   \\\n  do {                                                                         \\\n    wait(5, msec);                                                             \\\n  } while (!(condition))\n\n#define repeat(iterations)                                                     \\\n  for (int iterator = 0; iterator < iterations; iterator++)\n// END IQ MACROS\n\n\n// Robot configuration code.\ninertial BrainInertial = inertial();\nmotor LeftDriveSmart = motor(PORT1, 1, false);\nmotor RightDriveSmart = motor(PORT6, 1, true);\ngyro DrivetrainGyro = gyro(PORT4, true);\nsmartdrive Drivetrain = smartdrive(LeftDriveSmart, RightDriveSmart, DrivetrainGyro, 200);\n\ncontroller Controller = controller();\n\nvoid calibrateDrivetrain() {\n  wait(200, msec);\n  Brain.Screen.print(\"Calibrating\");\n  Brain.Screen.newLine();\n  Brain.Screen.print(\"Gyro\");\n  DrivetrainGyro.calibrate(calNormal);\n  while (DrivetrainGyro.isCalibrating()) {\n    wait(25, msec);\n  }\n\n  // Clears the screen and returns the cursor to row 1, column 1.\n  Brain.Screen.clearScreen();\n  Brain.Screen.setCursor(1, 1);\n}\n\n// Generated code.\n\n\n\n// define variable for remote controller enable/disable\nbool RemoteControlCodeEnabled = true;\n\n\n\n// Include the IQ Library\n#include \"vex.h\"\n  \n// Allows for easier use of the VEX Library\nusing namespace vex;\n\nfloat myVariable;\n\n// \"when started\" hat block\nint whenStarted1() {\n  while (true) {\n    if (Controller.AxisA.position() > 50.0) {\n      Drivetrain.drive(forward);\n    } else if (Controller.AxisA.position() > -50.0) {\n      Drivetrain.drive(reverse);\n    } else if (Controller.AxisB.position() > 50.0) {\n    } else if (Controller.ButtonEUp.pressing()) {\n    } else {\n    }\n  wait(20, msec);\n  }\n  return 0;\n}\n\n\nint main() {\n  // Calibrate the Drivetrain Gyro\n  calibrateDrivetrain();\n\n  whenStarted1();\n}","target":"Physical"}