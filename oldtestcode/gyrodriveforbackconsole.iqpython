{"mode":"Text","textContent":"#region VEXcode Generated Robot Configuration\nfrom vex import *\nimport urandom\n\n# Brain should be defined by default\nbrain=Brain()\n\n# Robot configuration code\nbrain_inertial = Inertial()\ncontroller = Controller()\nmotor_Right = Motor(Ports.PORT11, True)\nmotor_Left = Motor(Ports.PORT8, False)\n#endregion VEXcode Generated Robot Configuration\n\n# ------------------------------------------\n# \n# \tProject:      VEXcode Project\n# \tAuthor:       VEX\n# \tCreated:\n# \tDescription:  VEXcode IQ Python Project\n# \n# ------------------------------------------\n\n\n# Library imports\nfrom vex import *\n\n# Begin project code\n\nbrain_inertial.set_heading(0, DEGREES)\n\n\n\ndef DriveForward():\n    GR_forDrive = brain_inertial.rotation()\n    while (controller.axisA.position()>10):\n        rotat = brain_inertial.rotation()\n        print(GR_forDrive-rotat)\n        A = controller.axisA.position()\n\n        if(rotat-GR_forDrive>3): #RIGHT\n            motor_Left.set_velocity(A/3,PERCENT)\n            motor_Right.set_velocity(A/2,PERCENT)\n        elif(rotat-GR_forDrive<-3): #LEFT\n            motor_Left.set_velocity(A/2,PERCENT)\n            motor_Right.set_velocity(A/3,PERCENT)\n        else:\n            motor_Left.set_velocity(A/1.2,PERCENT)\n            motor_Right.set_velocity(A/1.2,PERCENT)\n\n        motor_Left.spin(FORWARD)\n        motor_Right.spin(FORWARD)\n\n\n\n\ndef backcount():\n    motor_Left.set_position(0,DEGREES)\n    motor_Right.set_position(0,DEGREES)\n    while (controller.axisA.position()<-10):\n        A = controller.axisA.position()\n        left = motor_Left.position(DEGREES)\n        right = motor_Right.position(DEGREES)\n        mo = left-right\n        if mo>2:\n            motor_Left.set_velocity(A,PERCENT) \n            motor_Right.set_velocity(A-5,PERCENT)      #left over\n\n\n        elif mo<2:\n            motor_Left.set_velocity(A-5,PERCENT) \n            motor_Right.set_velocity(A,PERCENT)            #right over\n\n\n        else:\n            motor_Left.set_velocity(A,PERCENT)\n            motor_Right.set_velocity(A,PERCENT)\n\n        motor_Left.spin(FORWARD)\n        motor_Right.spin(FORWARD)\n\n\n\ndef drivefrontcount():\n    motor_Left.set_position(0,DEGREES)\n    motor_Right.set_position(0,DEGREES)\n    while (controller.axisA.position()>10):\n        A = controller.axisA.position()\n        left = motor_Left.position(DEGREES)\n        right = motor_Right.position(DEGREES)\n        mo = left-right\n        if mo>2:\n            motor_Left.set_velocity(A-5,PERCENT) \n            motor_Right.set_velocity(A,PERCENT)      #left over\n\n\n        elif mo<2:\n            motor_Left.set_velocity(A,PERCENT) \n            motor_Right.set_velocity(A-5,PERCENT)            #right over\n\n\n        else:\n            motor_Left.set_velocity(A,PERCENT)\n            motor_Right.set_velocity(A,PERCENT)\n\n        motor_Left.spin(FORWARD)\n        motor_Right.spin(FORWARD)\n            \n\n\n\ndef DriveBackward():\n    GR_forDrive = brain_inertial.rotation()\n    while (controller.axisA.position()<-10):\n        rotat = brain_inertial.rotation()\n        print(GR_forDrive-rotat)\n        A = controller.axisA.position()\n\n        if(rotat-GR_forDrive>3): #RIGHT\n            motor_Left.set_velocity(A/2,PERCENT)\n            motor_Right.set_velocity(A/3,PERCENT)\n        elif(rotat-GR_forDrive<-3): #LEFT\n            motor_Left.set_velocity(A/3,PERCENT)\n            motor_Right.set_velocity(A/2,PERCENT)\n        else:\n            motor_Left.set_velocity(A/1.2,PERCENT)\n            motor_Right.set_velocity(A/1.2,PERCENT)\n\n        motor_Left.spin(FORWARD)\n        motor_Right.spin(FORWARD)\n\n\n\n\n\n\n\n\n\nwhile True:\n    if(controller.axisA.position()>10):\n        drivefrontcount()\n    elif(controller.axisA.position()<-10):\n        backcount()\n    # if(controller.axisA.position()>10):\n    #     DriveForward()\n    \n    # elif(controller.axisA.position()<-10):\n    #     DriveBackward()\n    \n    \n    \n    else:\n        motor_Left.stop()\n        motor_Right.stop()\n\n\n    ","textLanguage":"python","rconfig":[{"port":[],"name":"controller","customName":false,"deviceType":"Controller","deviceClass":"controller","setting":{"left":"","leftDir":"false","right":"","rightDir":"false","e":"","eDir":"false","f":"","fDir":"false","l3r3":"","l3r3Dir":"false","drive":"none"},"triportSourcePort":22},{"port":[11],"name":"motor_Right","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"true","fwd":"forward","rev":"reverse"},"triportSourcePort":22},{"port":[8],"name":"motor_Left","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse"},"triportSourcePort":22}],"slot":0,"platform":"IQ","sdkVersion":"20220726.10.00.00","appVersion":"2.4.5","minVersion":"2.4.0","fileFormat":"1.2.0","icon":"","targetBrainGen":"Second","target":"Physical"}